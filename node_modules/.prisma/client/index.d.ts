import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.8.0
 * Query Engine version: e6c9b4b2b7fa162d0d459d1863321f547498fcfe
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clients
 * const clients = await prisma.client.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clients
   * const clients = await prisma.client.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): ClientDelegate;

  /**
   * `prisma.produce`: Exposes CRUD operations for the **Produce** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produces
    * const produces = await prisma.produce.findMany()
    * ```
    */
  get produce(): ProduceDelegate;

  /**
   * `prisma.receipt`: Exposes CRUD operations for the **Receipt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Receipts
    * const receipts = await prisma.receipt.findMany()
    * ```
    */
  get receipt(): ReceiptDelegate;

  /**
   * `prisma.store`: Exposes CRUD operations for the **Store** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stores
    * const stores = await prisma.store.findMany()
    * ```
    */
  get store(): StoreDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const ClientDistinctFieldEnum: {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  age: 'age',
  email: 'email',
  phone: 'phone'
};

export declare type ClientDistinctFieldEnum = (typeof ClientDistinctFieldEnum)[keyof typeof ClientDistinctFieldEnum]


export declare const ProduceDistinctFieldEnum: {
  id: 'id',
  name: 'name',
  quantity: 'quantity',
  price: 'price',
  foodtype: 'foodtype',
  storeid: 'storeid'
};

export declare type ProduceDistinctFieldEnum = (typeof ProduceDistinctFieldEnum)[keyof typeof ProduceDistinctFieldEnum]


export declare const ReceiptDistinctFieldEnum: {
  id: 'id',
  subtotal: 'subtotal',
  total: 'total',
  clientid: 'clientid',
  storeid: 'storeid'
};

export declare type ReceiptDistinctFieldEnum = (typeof ReceiptDistinctFieldEnum)[keyof typeof ReceiptDistinctFieldEnum]


export declare const StoreDistinctFieldEnum: {
  id: 'id',
  name: 'name',
  address: 'address',
  email: 'email',
  storeowner: 'storeowner',
  city: 'city',
  province: 'province'
};

export declare type StoreDistinctFieldEnum = (typeof StoreDistinctFieldEnum)[keyof typeof StoreDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export declare const QueryMode: {
  default: 'default',
  insensitive: 'insensitive'
};

export declare type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]



/**
 * Model Client
 */

export type Client = {
  id: number
  first_name: string
  last_name: string
  age: number
  email: string
  phone: string
}


export type AggregateClient = {
  count: number
  avg: ClientAvgAggregateOutputType | null
  sum: ClientSumAggregateOutputType | null
  min: ClientMinAggregateOutputType | null
  max: ClientMaxAggregateOutputType | null
}

export type ClientAvgAggregateOutputType = {
  id: number
  age: number
}

export type ClientSumAggregateOutputType = {
  id: number
  age: number
}

export type ClientMinAggregateOutputType = {
  id: number
  age: number
}

export type ClientMaxAggregateOutputType = {
  id: number
  age: number
}


export type ClientAvgAggregateInputType = {
  id?: true
  age?: true
}

export type ClientSumAggregateInputType = {
  id?: true
  age?: true
}

export type ClientMinAggregateInputType = {
  id?: true
  age?: true
}

export type ClientMaxAggregateInputType = {
  id?: true
  age?: true
}

export type AggregateClientArgs = {
  where?: ClientWhereInput
  orderBy?: Enumerable<ClientOrderByInput> | ClientOrderByInput
  cursor?: ClientWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ClientDistinctFieldEnum>
  count?: true
  avg?: ClientAvgAggregateInputType
  sum?: ClientSumAggregateInputType
  min?: ClientMinAggregateInputType
  max?: ClientMaxAggregateInputType
}

export type GetClientAggregateType<T extends AggregateClientArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetClientAggregateScalarType<T[P]>
}

export type GetClientAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ClientAvgAggregateOutputType ? ClientAvgAggregateOutputType[P] : never
}
    
    

export type ClientSelect = {
  id?: boolean
  first_name?: boolean
  last_name?: boolean
  age?: boolean
  email?: boolean
  phone?: boolean
  receipts?: boolean | FindManyReceiptArgs
}

export type ClientInclude = {
  receipts?: boolean | FindManyReceiptArgs
}

export type ClientGetPayload<
  S extends boolean | null | undefined | ClientArgs,
  U = keyof S
> = S extends true
  ? Client
  : S extends undefined
  ? never
  : S extends ClientArgs | FindManyClientArgs
  ? 'include' extends U
    ? Client  & {
      [P in TrueKeys<S['include']>]:
      P extends 'receipts'
      ? Array<ReceiptGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Client ? Client[P]
: 
      P extends 'receipts'
      ? Array<ReceiptGetPayload<S['select'][P]>> : never
    }
  : Client
: Client


export interface ClientDelegate {
  /**
   * Find zero or one Client that matches the filter.
   * @param {FindOneClientArgs} args - Arguments to find a Client
   * @example
   * // Get one Client
   * const client = await prisma.client.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneClientArgs>(
    args: Subset<T, FindOneClientArgs>
  ): CheckSelect<T, Prisma__ClientClient<Client | null>, Prisma__ClientClient<ClientGetPayload<T> | null>>
  /**
   * Find the first Client that matches the filter.
   * @param {FindFirstClientArgs} args - Arguments to find a Client
   * @example
   * // Get one Client
   * const client = await prisma.client.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstClientArgs>(
    args: Subset<T, FindFirstClientArgs>
  ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>
  /**
   * Find zero or more Clients that matches the filter.
   * @param {FindManyClientArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Clients
   * const clients = await prisma.client.findMany()
   * 
   * // Get first 10 Clients
   * const clients = await prisma.client.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyClientArgs>(
    args?: Subset<T, FindManyClientArgs>
  ): CheckSelect<T, Promise<Array<Client>>, Promise<Array<ClientGetPayload<T>>>>
  /**
   * Create a Client.
   * @param {ClientCreateArgs} args - Arguments to create a Client.
   * @example
   * // Create one Client
   * const Client = await prisma.client.create({
   *   data: {
   *     // ... data to create a Client
   *   }
   * })
   * 
  **/
  create<T extends ClientCreateArgs>(
    args: Subset<T, ClientCreateArgs>
  ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>
  /**
   * Delete a Client.
   * @param {ClientDeleteArgs} args - Arguments to delete one Client.
   * @example
   * // Delete one Client
   * const Client = await prisma.client.delete({
   *   where: {
   *     // ... filter to delete one Client
   *   }
   * })
   * 
  **/
  delete<T extends ClientDeleteArgs>(
    args: Subset<T, ClientDeleteArgs>
  ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>
  /**
   * Update one Client.
   * @param {ClientUpdateArgs} args - Arguments to update one Client.
   * @example
   * // Update one Client
   * const client = await prisma.client.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ClientUpdateArgs>(
    args: Subset<T, ClientUpdateArgs>
  ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>
  /**
   * Delete zero or more Clients.
   * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
   * @example
   * // Delete a few Clients
   * const { count } = await prisma.client.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ClientDeleteManyArgs>(
    args: Subset<T, ClientDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Clients.
   * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Clients
   * const client = await prisma.client.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ClientUpdateManyArgs>(
    args: Subset<T, ClientUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Client.
   * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
   * @example
   * // Update or create a Client
   * const client = await prisma.client.upsert({
   *   create: {
   *     // ... data to create a Client
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Client we want to update
   *   }
   * })
  **/
  upsert<T extends ClientUpsertArgs>(
    args: Subset<T, ClientUpsertArgs>
  ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyClientArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateClientArgs>(args: Subset<T, AggregateClientArgs>): Promise<GetClientAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Client.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ClientClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  receipts<T extends FindManyReceiptArgs = {}>(args?: Subset<T, FindManyReceiptArgs>): CheckSelect<T, Promise<Array<Receipt>>, Promise<Array<ReceiptGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Client findOne
 */
export type FindOneClientArgs = {
  /**
   * Select specific fields to fetch from the Client
  **/
  select?: ClientSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ClientInclude | null
  /**
   * Filter, which Client to fetch.
  **/
  where: ClientWhereUniqueInput
}


/**
 * Client findFirst
 */
export type FindFirstClientArgs = {
  /**
   * Select specific fields to fetch from the Client
  **/
  select?: ClientSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ClientInclude | null
  /**
   * Filter, which Client to fetch.
  **/
  where?: ClientWhereInput
  orderBy?: Enumerable<ClientOrderByInput> | ClientOrderByInput
  cursor?: ClientWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ClientDistinctFieldEnum>
}


/**
 * Client findMany
 */
export type FindManyClientArgs = {
  /**
   * Select specific fields to fetch from the Client
  **/
  select?: ClientSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ClientInclude | null
  /**
   * Filter, which Clients to fetch.
  **/
  where?: ClientWhereInput
  /**
   * Determine the order of the Clients to fetch.
  **/
  orderBy?: Enumerable<ClientOrderByInput> | ClientOrderByInput
  /**
   * Sets the position for listing Clients.
  **/
  cursor?: ClientWhereUniqueInput
  /**
   * The number of Clients to fetch. If negative number, it will take Clients before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Clients.
  **/
  skip?: number
  distinct?: Enumerable<ClientDistinctFieldEnum>
}


/**
 * Client create
 */
export type ClientCreateArgs = {
  /**
   * Select specific fields to fetch from the Client
  **/
  select?: ClientSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ClientInclude | null
  /**
   * The data needed to create a Client.
  **/
  data: ClientCreateInput
}


/**
 * Client update
 */
export type ClientUpdateArgs = {
  /**
   * Select specific fields to fetch from the Client
  **/
  select?: ClientSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ClientInclude | null
  /**
   * The data needed to update a Client.
  **/
  data: ClientUpdateInput
  /**
   * Choose, which Client to update.
  **/
  where: ClientWhereUniqueInput
}


/**
 * Client updateMany
 */
export type ClientUpdateManyArgs = {
  data: ClientUpdateManyMutationInput
  where?: ClientWhereInput
}


/**
 * Client upsert
 */
export type ClientUpsertArgs = {
  /**
   * Select specific fields to fetch from the Client
  **/
  select?: ClientSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ClientInclude | null
  /**
   * The filter to search for the Client to update in case it exists.
  **/
  where: ClientWhereUniqueInput
  /**
   * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
  **/
  create: ClientCreateInput
  /**
   * In case the Client was found with the provided `where` argument, update it with this data.
  **/
  update: ClientUpdateInput
}


/**
 * Client delete
 */
export type ClientDeleteArgs = {
  /**
   * Select specific fields to fetch from the Client
  **/
  select?: ClientSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ClientInclude | null
  /**
   * Filter which Client to delete.
  **/
  where: ClientWhereUniqueInput
}


/**
 * Client deleteMany
 */
export type ClientDeleteManyArgs = {
  where?: ClientWhereInput
}


/**
 * Client without action
 */
export type ClientArgs = {
  /**
   * Select specific fields to fetch from the Client
  **/
  select?: ClientSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ClientInclude | null
}



/**
 * Model Produce
 */

export type Produce = {
  id: number
  name: string
  quantity: number
  price: number
  foodtype: string
  storeid: number
}


export type AggregateProduce = {
  count: number
  avg: ProduceAvgAggregateOutputType | null
  sum: ProduceSumAggregateOutputType | null
  min: ProduceMinAggregateOutputType | null
  max: ProduceMaxAggregateOutputType | null
}

export type ProduceAvgAggregateOutputType = {
  id: number
  quantity: number
  price: number
  storeid: number
}

export type ProduceSumAggregateOutputType = {
  id: number
  quantity: number
  price: number
  storeid: number
}

export type ProduceMinAggregateOutputType = {
  id: number
  quantity: number
  price: number
  storeid: number
}

export type ProduceMaxAggregateOutputType = {
  id: number
  quantity: number
  price: number
  storeid: number
}


export type ProduceAvgAggregateInputType = {
  id?: true
  quantity?: true
  price?: true
  storeid?: true
}

export type ProduceSumAggregateInputType = {
  id?: true
  quantity?: true
  price?: true
  storeid?: true
}

export type ProduceMinAggregateInputType = {
  id?: true
  quantity?: true
  price?: true
  storeid?: true
}

export type ProduceMaxAggregateInputType = {
  id?: true
  quantity?: true
  price?: true
  storeid?: true
}

export type AggregateProduceArgs = {
  where?: ProduceWhereInput
  orderBy?: Enumerable<ProduceOrderByInput> | ProduceOrderByInput
  cursor?: ProduceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProduceDistinctFieldEnum>
  count?: true
  avg?: ProduceAvgAggregateInputType
  sum?: ProduceSumAggregateInputType
  min?: ProduceMinAggregateInputType
  max?: ProduceMaxAggregateInputType
}

export type GetProduceAggregateType<T extends AggregateProduceArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetProduceAggregateScalarType<T[P]>
}

export type GetProduceAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ProduceAvgAggregateOutputType ? ProduceAvgAggregateOutputType[P] : never
}
    
    

export type ProduceSelect = {
  id?: boolean
  name?: boolean
  quantity?: boolean
  price?: boolean
  foodtype?: boolean
  store?: boolean | StoreArgs
  storeid?: boolean
  receipt?: boolean | FindManyReceiptArgs
}

export type ProduceInclude = {
  store?: boolean | StoreArgs
  receipt?: boolean | FindManyReceiptArgs
}

export type ProduceGetPayload<
  S extends boolean | null | undefined | ProduceArgs,
  U = keyof S
> = S extends true
  ? Produce
  : S extends undefined
  ? never
  : S extends ProduceArgs | FindManyProduceArgs
  ? 'include' extends U
    ? Produce  & {
      [P in TrueKeys<S['include']>]:
      P extends 'store'
      ? StoreGetPayload<S['include'][P]> :
      P extends 'receipt'
      ? Array<ReceiptGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Produce ? Produce[P]
: 
      P extends 'store'
      ? StoreGetPayload<S['select'][P]> :
      P extends 'receipt'
      ? Array<ReceiptGetPayload<S['select'][P]>> : never
    }
  : Produce
: Produce


export interface ProduceDelegate {
  /**
   * Find zero or one Produce that matches the filter.
   * @param {FindOneProduceArgs} args - Arguments to find a Produce
   * @example
   * // Get one Produce
   * const produce = await prisma.produce.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneProduceArgs>(
    args: Subset<T, FindOneProduceArgs>
  ): CheckSelect<T, Prisma__ProduceClient<Produce | null>, Prisma__ProduceClient<ProduceGetPayload<T> | null>>
  /**
   * Find the first Produce that matches the filter.
   * @param {FindFirstProduceArgs} args - Arguments to find a Produce
   * @example
   * // Get one Produce
   * const produce = await prisma.produce.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstProduceArgs>(
    args: Subset<T, FindFirstProduceArgs>
  ): CheckSelect<T, Prisma__ProduceClient<Produce>, Prisma__ProduceClient<ProduceGetPayload<T>>>
  /**
   * Find zero or more Produces that matches the filter.
   * @param {FindManyProduceArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Produces
   * const produces = await prisma.produce.findMany()
   * 
   * // Get first 10 Produces
   * const produces = await prisma.produce.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const produceWithIdOnly = await prisma.produce.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyProduceArgs>(
    args?: Subset<T, FindManyProduceArgs>
  ): CheckSelect<T, Promise<Array<Produce>>, Promise<Array<ProduceGetPayload<T>>>>
  /**
   * Create a Produce.
   * @param {ProduceCreateArgs} args - Arguments to create a Produce.
   * @example
   * // Create one Produce
   * const Produce = await prisma.produce.create({
   *   data: {
   *     // ... data to create a Produce
   *   }
   * })
   * 
  **/
  create<T extends ProduceCreateArgs>(
    args: Subset<T, ProduceCreateArgs>
  ): CheckSelect<T, Prisma__ProduceClient<Produce>, Prisma__ProduceClient<ProduceGetPayload<T>>>
  /**
   * Delete a Produce.
   * @param {ProduceDeleteArgs} args - Arguments to delete one Produce.
   * @example
   * // Delete one Produce
   * const Produce = await prisma.produce.delete({
   *   where: {
   *     // ... filter to delete one Produce
   *   }
   * })
   * 
  **/
  delete<T extends ProduceDeleteArgs>(
    args: Subset<T, ProduceDeleteArgs>
  ): CheckSelect<T, Prisma__ProduceClient<Produce>, Prisma__ProduceClient<ProduceGetPayload<T>>>
  /**
   * Update one Produce.
   * @param {ProduceUpdateArgs} args - Arguments to update one Produce.
   * @example
   * // Update one Produce
   * const produce = await prisma.produce.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ProduceUpdateArgs>(
    args: Subset<T, ProduceUpdateArgs>
  ): CheckSelect<T, Prisma__ProduceClient<Produce>, Prisma__ProduceClient<ProduceGetPayload<T>>>
  /**
   * Delete zero or more Produces.
   * @param {ProduceDeleteManyArgs} args - Arguments to filter Produces to delete.
   * @example
   * // Delete a few Produces
   * const { count } = await prisma.produce.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ProduceDeleteManyArgs>(
    args: Subset<T, ProduceDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Produces.
   * @param {ProduceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Produces
   * const produce = await prisma.produce.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ProduceUpdateManyArgs>(
    args: Subset<T, ProduceUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Produce.
   * @param {ProduceUpsertArgs} args - Arguments to update or create a Produce.
   * @example
   * // Update or create a Produce
   * const produce = await prisma.produce.upsert({
   *   create: {
   *     // ... data to create a Produce
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Produce we want to update
   *   }
   * })
  **/
  upsert<T extends ProduceUpsertArgs>(
    args: Subset<T, ProduceUpsertArgs>
  ): CheckSelect<T, Prisma__ProduceClient<Produce>, Prisma__ProduceClient<ProduceGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyProduceArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateProduceArgs>(args: Subset<T, AggregateProduceArgs>): Promise<GetProduceAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Produce.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ProduceClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  store<T extends StoreArgs = {}>(args?: Subset<T, StoreArgs>): CheckSelect<T, Prisma__StoreClient<Store | null>, Prisma__StoreClient<StoreGetPayload<T> | null>>;

  receipt<T extends FindManyReceiptArgs = {}>(args?: Subset<T, FindManyReceiptArgs>): CheckSelect<T, Promise<Array<Receipt>>, Promise<Array<ReceiptGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Produce findOne
 */
export type FindOneProduceArgs = {
  /**
   * Select specific fields to fetch from the Produce
  **/
  select?: ProduceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProduceInclude | null
  /**
   * Filter, which Produce to fetch.
  **/
  where: ProduceWhereUniqueInput
}


/**
 * Produce findFirst
 */
export type FindFirstProduceArgs = {
  /**
   * Select specific fields to fetch from the Produce
  **/
  select?: ProduceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProduceInclude | null
  /**
   * Filter, which Produce to fetch.
  **/
  where?: ProduceWhereInput
  orderBy?: Enumerable<ProduceOrderByInput> | ProduceOrderByInput
  cursor?: ProduceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProduceDistinctFieldEnum>
}


/**
 * Produce findMany
 */
export type FindManyProduceArgs = {
  /**
   * Select specific fields to fetch from the Produce
  **/
  select?: ProduceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProduceInclude | null
  /**
   * Filter, which Produces to fetch.
  **/
  where?: ProduceWhereInput
  /**
   * Determine the order of the Produces to fetch.
  **/
  orderBy?: Enumerable<ProduceOrderByInput> | ProduceOrderByInput
  /**
   * Sets the position for listing Produces.
  **/
  cursor?: ProduceWhereUniqueInput
  /**
   * The number of Produces to fetch. If negative number, it will take Produces before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Produces.
  **/
  skip?: number
  distinct?: Enumerable<ProduceDistinctFieldEnum>
}


/**
 * Produce create
 */
export type ProduceCreateArgs = {
  /**
   * Select specific fields to fetch from the Produce
  **/
  select?: ProduceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProduceInclude | null
  /**
   * The data needed to create a Produce.
  **/
  data: ProduceCreateInput
}


/**
 * Produce update
 */
export type ProduceUpdateArgs = {
  /**
   * Select specific fields to fetch from the Produce
  **/
  select?: ProduceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProduceInclude | null
  /**
   * The data needed to update a Produce.
  **/
  data: ProduceUpdateInput
  /**
   * Choose, which Produce to update.
  **/
  where: ProduceWhereUniqueInput
}


/**
 * Produce updateMany
 */
export type ProduceUpdateManyArgs = {
  data: ProduceUpdateManyMutationInput
  where?: ProduceWhereInput
}


/**
 * Produce upsert
 */
export type ProduceUpsertArgs = {
  /**
   * Select specific fields to fetch from the Produce
  **/
  select?: ProduceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProduceInclude | null
  /**
   * The filter to search for the Produce to update in case it exists.
  **/
  where: ProduceWhereUniqueInput
  /**
   * In case the Produce found by the `where` argument doesn't exist, create a new Produce with this data.
  **/
  create: ProduceCreateInput
  /**
   * In case the Produce was found with the provided `where` argument, update it with this data.
  **/
  update: ProduceUpdateInput
}


/**
 * Produce delete
 */
export type ProduceDeleteArgs = {
  /**
   * Select specific fields to fetch from the Produce
  **/
  select?: ProduceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProduceInclude | null
  /**
   * Filter which Produce to delete.
  **/
  where: ProduceWhereUniqueInput
}


/**
 * Produce deleteMany
 */
export type ProduceDeleteManyArgs = {
  where?: ProduceWhereInput
}


/**
 * Produce without action
 */
export type ProduceArgs = {
  /**
   * Select specific fields to fetch from the Produce
  **/
  select?: ProduceSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProduceInclude | null
}



/**
 * Model Receipt
 */

export type Receipt = {
  id: number
  subtotal: number
  total: number
  clientid: number
  storeid: number
}


export type AggregateReceipt = {
  count: number
  avg: ReceiptAvgAggregateOutputType | null
  sum: ReceiptSumAggregateOutputType | null
  min: ReceiptMinAggregateOutputType | null
  max: ReceiptMaxAggregateOutputType | null
}

export type ReceiptAvgAggregateOutputType = {
  id: number
  subtotal: number
  total: number
  clientid: number
  storeid: number
}

export type ReceiptSumAggregateOutputType = {
  id: number
  subtotal: number
  total: number
  clientid: number
  storeid: number
}

export type ReceiptMinAggregateOutputType = {
  id: number
  subtotal: number
  total: number
  clientid: number
  storeid: number
}

export type ReceiptMaxAggregateOutputType = {
  id: number
  subtotal: number
  total: number
  clientid: number
  storeid: number
}


export type ReceiptAvgAggregateInputType = {
  id?: true
  subtotal?: true
  total?: true
  clientid?: true
  storeid?: true
}

export type ReceiptSumAggregateInputType = {
  id?: true
  subtotal?: true
  total?: true
  clientid?: true
  storeid?: true
}

export type ReceiptMinAggregateInputType = {
  id?: true
  subtotal?: true
  total?: true
  clientid?: true
  storeid?: true
}

export type ReceiptMaxAggregateInputType = {
  id?: true
  subtotal?: true
  total?: true
  clientid?: true
  storeid?: true
}

export type AggregateReceiptArgs = {
  where?: ReceiptWhereInput
  orderBy?: Enumerable<ReceiptOrderByInput> | ReceiptOrderByInput
  cursor?: ReceiptWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ReceiptDistinctFieldEnum>
  count?: true
  avg?: ReceiptAvgAggregateInputType
  sum?: ReceiptSumAggregateInputType
  min?: ReceiptMinAggregateInputType
  max?: ReceiptMaxAggregateInputType
}

export type GetReceiptAggregateType<T extends AggregateReceiptArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetReceiptAggregateScalarType<T[P]>
}

export type GetReceiptAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ReceiptAvgAggregateOutputType ? ReceiptAvgAggregateOutputType[P] : never
}
    
    

export type ReceiptSelect = {
  id?: boolean
  subtotal?: boolean
  total?: boolean
  client?: boolean | ClientArgs
  clientid?: boolean
  store?: boolean | StoreArgs
  storeid?: boolean
  produces?: boolean | FindManyProduceArgs
}

export type ReceiptInclude = {
  client?: boolean | ClientArgs
  store?: boolean | StoreArgs
  produces?: boolean | FindManyProduceArgs
}

export type ReceiptGetPayload<
  S extends boolean | null | undefined | ReceiptArgs,
  U = keyof S
> = S extends true
  ? Receipt
  : S extends undefined
  ? never
  : S extends ReceiptArgs | FindManyReceiptArgs
  ? 'include' extends U
    ? Receipt  & {
      [P in TrueKeys<S['include']>]:
      P extends 'client'
      ? ClientGetPayload<S['include'][P]> :
      P extends 'store'
      ? StoreGetPayload<S['include'][P]> :
      P extends 'produces'
      ? Array<ProduceGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Receipt ? Receipt[P]
: 
      P extends 'client'
      ? ClientGetPayload<S['select'][P]> :
      P extends 'store'
      ? StoreGetPayload<S['select'][P]> :
      P extends 'produces'
      ? Array<ProduceGetPayload<S['select'][P]>> : never
    }
  : Receipt
: Receipt


export interface ReceiptDelegate {
  /**
   * Find zero or one Receipt that matches the filter.
   * @param {FindOneReceiptArgs} args - Arguments to find a Receipt
   * @example
   * // Get one Receipt
   * const receipt = await prisma.receipt.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneReceiptArgs>(
    args: Subset<T, FindOneReceiptArgs>
  ): CheckSelect<T, Prisma__ReceiptClient<Receipt | null>, Prisma__ReceiptClient<ReceiptGetPayload<T> | null>>
  /**
   * Find the first Receipt that matches the filter.
   * @param {FindFirstReceiptArgs} args - Arguments to find a Receipt
   * @example
   * // Get one Receipt
   * const receipt = await prisma.receipt.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstReceiptArgs>(
    args: Subset<T, FindFirstReceiptArgs>
  ): CheckSelect<T, Prisma__ReceiptClient<Receipt>, Prisma__ReceiptClient<ReceiptGetPayload<T>>>
  /**
   * Find zero or more Receipts that matches the filter.
   * @param {FindManyReceiptArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Receipts
   * const receipts = await prisma.receipt.findMany()
   * 
   * // Get first 10 Receipts
   * const receipts = await prisma.receipt.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const receiptWithIdOnly = await prisma.receipt.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyReceiptArgs>(
    args?: Subset<T, FindManyReceiptArgs>
  ): CheckSelect<T, Promise<Array<Receipt>>, Promise<Array<ReceiptGetPayload<T>>>>
  /**
   * Create a Receipt.
   * @param {ReceiptCreateArgs} args - Arguments to create a Receipt.
   * @example
   * // Create one Receipt
   * const Receipt = await prisma.receipt.create({
   *   data: {
   *     // ... data to create a Receipt
   *   }
   * })
   * 
  **/
  create<T extends ReceiptCreateArgs>(
    args: Subset<T, ReceiptCreateArgs>
  ): CheckSelect<T, Prisma__ReceiptClient<Receipt>, Prisma__ReceiptClient<ReceiptGetPayload<T>>>
  /**
   * Delete a Receipt.
   * @param {ReceiptDeleteArgs} args - Arguments to delete one Receipt.
   * @example
   * // Delete one Receipt
   * const Receipt = await prisma.receipt.delete({
   *   where: {
   *     // ... filter to delete one Receipt
   *   }
   * })
   * 
  **/
  delete<T extends ReceiptDeleteArgs>(
    args: Subset<T, ReceiptDeleteArgs>
  ): CheckSelect<T, Prisma__ReceiptClient<Receipt>, Prisma__ReceiptClient<ReceiptGetPayload<T>>>
  /**
   * Update one Receipt.
   * @param {ReceiptUpdateArgs} args - Arguments to update one Receipt.
   * @example
   * // Update one Receipt
   * const receipt = await prisma.receipt.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ReceiptUpdateArgs>(
    args: Subset<T, ReceiptUpdateArgs>
  ): CheckSelect<T, Prisma__ReceiptClient<Receipt>, Prisma__ReceiptClient<ReceiptGetPayload<T>>>
  /**
   * Delete zero or more Receipts.
   * @param {ReceiptDeleteManyArgs} args - Arguments to filter Receipts to delete.
   * @example
   * // Delete a few Receipts
   * const { count } = await prisma.receipt.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ReceiptDeleteManyArgs>(
    args: Subset<T, ReceiptDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Receipts.
   * @param {ReceiptUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Receipts
   * const receipt = await prisma.receipt.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ReceiptUpdateManyArgs>(
    args: Subset<T, ReceiptUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Receipt.
   * @param {ReceiptUpsertArgs} args - Arguments to update or create a Receipt.
   * @example
   * // Update or create a Receipt
   * const receipt = await prisma.receipt.upsert({
   *   create: {
   *     // ... data to create a Receipt
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Receipt we want to update
   *   }
   * })
  **/
  upsert<T extends ReceiptUpsertArgs>(
    args: Subset<T, ReceiptUpsertArgs>
  ): CheckSelect<T, Prisma__ReceiptClient<Receipt>, Prisma__ReceiptClient<ReceiptGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyReceiptArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateReceiptArgs>(args: Subset<T, AggregateReceiptArgs>): Promise<GetReceiptAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Receipt.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ReceiptClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  client<T extends ClientArgs = {}>(args?: Subset<T, ClientArgs>): CheckSelect<T, Prisma__ClientClient<Client | null>, Prisma__ClientClient<ClientGetPayload<T> | null>>;

  store<T extends StoreArgs = {}>(args?: Subset<T, StoreArgs>): CheckSelect<T, Prisma__StoreClient<Store | null>, Prisma__StoreClient<StoreGetPayload<T> | null>>;

  produces<T extends FindManyProduceArgs = {}>(args?: Subset<T, FindManyProduceArgs>): CheckSelect<T, Promise<Array<Produce>>, Promise<Array<ProduceGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Receipt findOne
 */
export type FindOneReceiptArgs = {
  /**
   * Select specific fields to fetch from the Receipt
  **/
  select?: ReceiptSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReceiptInclude | null
  /**
   * Filter, which Receipt to fetch.
  **/
  where: ReceiptWhereUniqueInput
}


/**
 * Receipt findFirst
 */
export type FindFirstReceiptArgs = {
  /**
   * Select specific fields to fetch from the Receipt
  **/
  select?: ReceiptSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReceiptInclude | null
  /**
   * Filter, which Receipt to fetch.
  **/
  where?: ReceiptWhereInput
  orderBy?: Enumerable<ReceiptOrderByInput> | ReceiptOrderByInput
  cursor?: ReceiptWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ReceiptDistinctFieldEnum>
}


/**
 * Receipt findMany
 */
export type FindManyReceiptArgs = {
  /**
   * Select specific fields to fetch from the Receipt
  **/
  select?: ReceiptSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReceiptInclude | null
  /**
   * Filter, which Receipts to fetch.
  **/
  where?: ReceiptWhereInput
  /**
   * Determine the order of the Receipts to fetch.
  **/
  orderBy?: Enumerable<ReceiptOrderByInput> | ReceiptOrderByInput
  /**
   * Sets the position for listing Receipts.
  **/
  cursor?: ReceiptWhereUniqueInput
  /**
   * The number of Receipts to fetch. If negative number, it will take Receipts before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Receipts.
  **/
  skip?: number
  distinct?: Enumerable<ReceiptDistinctFieldEnum>
}


/**
 * Receipt create
 */
export type ReceiptCreateArgs = {
  /**
   * Select specific fields to fetch from the Receipt
  **/
  select?: ReceiptSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReceiptInclude | null
  /**
   * The data needed to create a Receipt.
  **/
  data: ReceiptCreateInput
}


/**
 * Receipt update
 */
export type ReceiptUpdateArgs = {
  /**
   * Select specific fields to fetch from the Receipt
  **/
  select?: ReceiptSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReceiptInclude | null
  /**
   * The data needed to update a Receipt.
  **/
  data: ReceiptUpdateInput
  /**
   * Choose, which Receipt to update.
  **/
  where: ReceiptWhereUniqueInput
}


/**
 * Receipt updateMany
 */
export type ReceiptUpdateManyArgs = {
  data: ReceiptUpdateManyMutationInput
  where?: ReceiptWhereInput
}


/**
 * Receipt upsert
 */
export type ReceiptUpsertArgs = {
  /**
   * Select specific fields to fetch from the Receipt
  **/
  select?: ReceiptSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReceiptInclude | null
  /**
   * The filter to search for the Receipt to update in case it exists.
  **/
  where: ReceiptWhereUniqueInput
  /**
   * In case the Receipt found by the `where` argument doesn't exist, create a new Receipt with this data.
  **/
  create: ReceiptCreateInput
  /**
   * In case the Receipt was found with the provided `where` argument, update it with this data.
  **/
  update: ReceiptUpdateInput
}


/**
 * Receipt delete
 */
export type ReceiptDeleteArgs = {
  /**
   * Select specific fields to fetch from the Receipt
  **/
  select?: ReceiptSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReceiptInclude | null
  /**
   * Filter which Receipt to delete.
  **/
  where: ReceiptWhereUniqueInput
}


/**
 * Receipt deleteMany
 */
export type ReceiptDeleteManyArgs = {
  where?: ReceiptWhereInput
}


/**
 * Receipt without action
 */
export type ReceiptArgs = {
  /**
   * Select specific fields to fetch from the Receipt
  **/
  select?: ReceiptSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReceiptInclude | null
}



/**
 * Model Store
 */

export type Store = {
  id: number
  name: string
  address: string
  email: string
  storeowner: string
  city: string
  province: string
}


export type AggregateStore = {
  count: number
  avg: StoreAvgAggregateOutputType | null
  sum: StoreSumAggregateOutputType | null
  min: StoreMinAggregateOutputType | null
  max: StoreMaxAggregateOutputType | null
}

export type StoreAvgAggregateOutputType = {
  id: number
}

export type StoreSumAggregateOutputType = {
  id: number
}

export type StoreMinAggregateOutputType = {
  id: number
}

export type StoreMaxAggregateOutputType = {
  id: number
}


export type StoreAvgAggregateInputType = {
  id?: true
}

export type StoreSumAggregateInputType = {
  id?: true
}

export type StoreMinAggregateInputType = {
  id?: true
}

export type StoreMaxAggregateInputType = {
  id?: true
}

export type AggregateStoreArgs = {
  where?: StoreWhereInput
  orderBy?: Enumerable<StoreOrderByInput> | StoreOrderByInput
  cursor?: StoreWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<StoreDistinctFieldEnum>
  count?: true
  avg?: StoreAvgAggregateInputType
  sum?: StoreSumAggregateInputType
  min?: StoreMinAggregateInputType
  max?: StoreMaxAggregateInputType
}

export type GetStoreAggregateType<T extends AggregateStoreArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetStoreAggregateScalarType<T[P]>
}

export type GetStoreAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof StoreAvgAggregateOutputType ? StoreAvgAggregateOutputType[P] : never
}
    
    

export type StoreSelect = {
  id?: boolean
  name?: boolean
  address?: boolean
  email?: boolean
  storeowner?: boolean
  city?: boolean
  province?: boolean
  receipts?: boolean | FindManyReceiptArgs
  produces?: boolean | FindManyProduceArgs
}

export type StoreInclude = {
  receipts?: boolean | FindManyReceiptArgs
  produces?: boolean | FindManyProduceArgs
}

export type StoreGetPayload<
  S extends boolean | null | undefined | StoreArgs,
  U = keyof S
> = S extends true
  ? Store
  : S extends undefined
  ? never
  : S extends StoreArgs | FindManyStoreArgs
  ? 'include' extends U
    ? Store  & {
      [P in TrueKeys<S['include']>]:
      P extends 'receipts'
      ? Array<ReceiptGetPayload<S['include'][P]>> :
      P extends 'produces'
      ? Array<ProduceGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Store ? Store[P]
: 
      P extends 'receipts'
      ? Array<ReceiptGetPayload<S['select'][P]>> :
      P extends 'produces'
      ? Array<ProduceGetPayload<S['select'][P]>> : never
    }
  : Store
: Store


export interface StoreDelegate {
  /**
   * Find zero or one Store that matches the filter.
   * @param {FindOneStoreArgs} args - Arguments to find a Store
   * @example
   * // Get one Store
   * const store = await prisma.store.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneStoreArgs>(
    args: Subset<T, FindOneStoreArgs>
  ): CheckSelect<T, Prisma__StoreClient<Store | null>, Prisma__StoreClient<StoreGetPayload<T> | null>>
  /**
   * Find the first Store that matches the filter.
   * @param {FindFirstStoreArgs} args - Arguments to find a Store
   * @example
   * // Get one Store
   * const store = await prisma.store.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstStoreArgs>(
    args: Subset<T, FindFirstStoreArgs>
  ): CheckSelect<T, Prisma__StoreClient<Store>, Prisma__StoreClient<StoreGetPayload<T>>>
  /**
   * Find zero or more Stores that matches the filter.
   * @param {FindManyStoreArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Stores
   * const stores = await prisma.store.findMany()
   * 
   * // Get first 10 Stores
   * const stores = await prisma.store.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const storeWithIdOnly = await prisma.store.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyStoreArgs>(
    args?: Subset<T, FindManyStoreArgs>
  ): CheckSelect<T, Promise<Array<Store>>, Promise<Array<StoreGetPayload<T>>>>
  /**
   * Create a Store.
   * @param {StoreCreateArgs} args - Arguments to create a Store.
   * @example
   * // Create one Store
   * const Store = await prisma.store.create({
   *   data: {
   *     // ... data to create a Store
   *   }
   * })
   * 
  **/
  create<T extends StoreCreateArgs>(
    args: Subset<T, StoreCreateArgs>
  ): CheckSelect<T, Prisma__StoreClient<Store>, Prisma__StoreClient<StoreGetPayload<T>>>
  /**
   * Delete a Store.
   * @param {StoreDeleteArgs} args - Arguments to delete one Store.
   * @example
   * // Delete one Store
   * const Store = await prisma.store.delete({
   *   where: {
   *     // ... filter to delete one Store
   *   }
   * })
   * 
  **/
  delete<T extends StoreDeleteArgs>(
    args: Subset<T, StoreDeleteArgs>
  ): CheckSelect<T, Prisma__StoreClient<Store>, Prisma__StoreClient<StoreGetPayload<T>>>
  /**
   * Update one Store.
   * @param {StoreUpdateArgs} args - Arguments to update one Store.
   * @example
   * // Update one Store
   * const store = await prisma.store.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends StoreUpdateArgs>(
    args: Subset<T, StoreUpdateArgs>
  ): CheckSelect<T, Prisma__StoreClient<Store>, Prisma__StoreClient<StoreGetPayload<T>>>
  /**
   * Delete zero or more Stores.
   * @param {StoreDeleteManyArgs} args - Arguments to filter Stores to delete.
   * @example
   * // Delete a few Stores
   * const { count } = await prisma.store.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends StoreDeleteManyArgs>(
    args: Subset<T, StoreDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Stores.
   * @param {StoreUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Stores
   * const store = await prisma.store.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends StoreUpdateManyArgs>(
    args: Subset<T, StoreUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Store.
   * @param {StoreUpsertArgs} args - Arguments to update or create a Store.
   * @example
   * // Update or create a Store
   * const store = await prisma.store.upsert({
   *   create: {
   *     // ... data to create a Store
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Store we want to update
   *   }
   * })
  **/
  upsert<T extends StoreUpsertArgs>(
    args: Subset<T, StoreUpsertArgs>
  ): CheckSelect<T, Prisma__StoreClient<Store>, Prisma__StoreClient<StoreGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyStoreArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateStoreArgs>(args: Subset<T, AggregateStoreArgs>): Promise<GetStoreAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Store.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__StoreClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  receipts<T extends FindManyReceiptArgs = {}>(args?: Subset<T, FindManyReceiptArgs>): CheckSelect<T, Promise<Array<Receipt>>, Promise<Array<ReceiptGetPayload<T>>>>;

  produces<T extends FindManyProduceArgs = {}>(args?: Subset<T, FindManyProduceArgs>): CheckSelect<T, Promise<Array<Produce>>, Promise<Array<ProduceGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Store findOne
 */
export type FindOneStoreArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * Filter, which Store to fetch.
  **/
  where: StoreWhereUniqueInput
}


/**
 * Store findFirst
 */
export type FindFirstStoreArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * Filter, which Store to fetch.
  **/
  where?: StoreWhereInput
  orderBy?: Enumerable<StoreOrderByInput> | StoreOrderByInput
  cursor?: StoreWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<StoreDistinctFieldEnum>
}


/**
 * Store findMany
 */
export type FindManyStoreArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * Filter, which Stores to fetch.
  **/
  where?: StoreWhereInput
  /**
   * Determine the order of the Stores to fetch.
  **/
  orderBy?: Enumerable<StoreOrderByInput> | StoreOrderByInput
  /**
   * Sets the position for listing Stores.
  **/
  cursor?: StoreWhereUniqueInput
  /**
   * The number of Stores to fetch. If negative number, it will take Stores before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Stores.
  **/
  skip?: number
  distinct?: Enumerable<StoreDistinctFieldEnum>
}


/**
 * Store create
 */
export type StoreCreateArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * The data needed to create a Store.
  **/
  data: StoreCreateInput
}


/**
 * Store update
 */
export type StoreUpdateArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * The data needed to update a Store.
  **/
  data: StoreUpdateInput
  /**
   * Choose, which Store to update.
  **/
  where: StoreWhereUniqueInput
}


/**
 * Store updateMany
 */
export type StoreUpdateManyArgs = {
  data: StoreUpdateManyMutationInput
  where?: StoreWhereInput
}


/**
 * Store upsert
 */
export type StoreUpsertArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * The filter to search for the Store to update in case it exists.
  **/
  where: StoreWhereUniqueInput
  /**
   * In case the Store found by the `where` argument doesn't exist, create a new Store with this data.
  **/
  create: StoreCreateInput
  /**
   * In case the Store was found with the provided `where` argument, update it with this data.
  **/
  update: StoreUpdateInput
}


/**
 * Store delete
 */
export type StoreDeleteArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
  /**
   * Filter which Store to delete.
  **/
  where: StoreWhereUniqueInput
}


/**
 * Store deleteMany
 */
export type StoreDeleteManyArgs = {
  where?: StoreWhereInput
}


/**
 * Store without action
 */
export type StoreArgs = {
  /**
   * Select specific fields to fetch from the Store
  **/
  select?: StoreSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: StoreInclude | null
}



/**
 * Deep Input Types
 */


export type ClientWhereInput = {
  AND?: ClientWhereInput | Enumerable<ClientWhereInput>
  OR?: ClientWhereInput | Enumerable<ClientWhereInput>
  NOT?: ClientWhereInput | Enumerable<ClientWhereInput>
  id?: IntFilter | number
  first_name?: StringFilter | string
  last_name?: StringFilter | string
  age?: IntFilter | number
  email?: StringFilter | string
  phone?: StringFilter | string
  receipts?: ReceiptListRelationFilter
}

export type ClientOrderByInput = {
  id?: SortOrder
  first_name?: SortOrder
  last_name?: SortOrder
  age?: SortOrder
  email?: SortOrder
  phone?: SortOrder
}

export type ClientWhereUniqueInput = {
  id?: number
}

export type ProduceWhereInput = {
  AND?: ProduceWhereInput | Enumerable<ProduceWhereInput>
  OR?: ProduceWhereInput | Enumerable<ProduceWhereInput>
  NOT?: ProduceWhereInput | Enumerable<ProduceWhereInput>
  id?: IntFilter | number
  name?: StringFilter | string
  quantity?: IntFilter | number
  price?: FloatFilter | number
  foodtype?: StringFilter | string
  store?: StoreRelationFilter | StoreWhereInput
  storeid?: IntFilter | number
  receipt?: ReceiptListRelationFilter
}

export type ProduceOrderByInput = {
  id?: SortOrder
  name?: SortOrder
  quantity?: SortOrder
  price?: SortOrder
  foodtype?: SortOrder
  storeid?: SortOrder
}

export type ProduceWhereUniqueInput = {
  id?: number
}

export type ReceiptWhereInput = {
  AND?: ReceiptWhereInput | Enumerable<ReceiptWhereInput>
  OR?: ReceiptWhereInput | Enumerable<ReceiptWhereInput>
  NOT?: ReceiptWhereInput | Enumerable<ReceiptWhereInput>
  id?: IntFilter | number
  subtotal?: FloatFilter | number
  total?: FloatFilter | number
  client?: ClientRelationFilter | ClientWhereInput
  clientid?: IntFilter | number
  store?: StoreRelationFilter | StoreWhereInput
  storeid?: IntFilter | number
  produces?: ProduceListRelationFilter
}

export type ReceiptOrderByInput = {
  id?: SortOrder
  subtotal?: SortOrder
  total?: SortOrder
  clientid?: SortOrder
  storeid?: SortOrder
}

export type ReceiptWhereUniqueInput = {
  id?: number
}

export type StoreWhereInput = {
  AND?: StoreWhereInput | Enumerable<StoreWhereInput>
  OR?: StoreWhereInput | Enumerable<StoreWhereInput>
  NOT?: StoreWhereInput | Enumerable<StoreWhereInput>
  id?: IntFilter | number
  name?: StringFilter | string
  address?: StringFilter | string
  email?: StringFilter | string
  storeowner?: StringFilter | string
  city?: StringFilter | string
  province?: StringFilter | string
  receipts?: ReceiptListRelationFilter
  produces?: ProduceListRelationFilter
}

export type StoreOrderByInput = {
  id?: SortOrder
  name?: SortOrder
  address?: SortOrder
  email?: SortOrder
  storeowner?: SortOrder
  city?: SortOrder
  province?: SortOrder
}

export type StoreWhereUniqueInput = {
  id?: number
}

export type ClientCreateInput = {
  first_name: string
  last_name: string
  age: number
  email: string
  phone: string
  receipts?: ReceiptCreateManyWithoutClientInput
}

export type ClientUpdateInput = {
  first_name?: string | StringFieldUpdateOperationsInput
  last_name?: string | StringFieldUpdateOperationsInput
  age?: number | IntFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  phone?: string | StringFieldUpdateOperationsInput
  receipts?: ReceiptUpdateManyWithoutClientInput
}

export type ClientUpdateManyMutationInput = {
  first_name?: string | StringFieldUpdateOperationsInput
  last_name?: string | StringFieldUpdateOperationsInput
  age?: number | IntFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  phone?: string | StringFieldUpdateOperationsInput
}

export type ProduceCreateInput = {
  name: string
  quantity: number
  price: number
  foodtype: string
  store: StoreCreateOneWithoutProducesInput
  receipt?: ReceiptCreateManyWithoutProducesInput
}

export type ProduceUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
  quantity?: number | IntFieldUpdateOperationsInput
  price?: number | FloatFieldUpdateOperationsInput
  foodtype?: string | StringFieldUpdateOperationsInput
  store?: StoreUpdateOneRequiredWithoutProducesInput
  receipt?: ReceiptUpdateManyWithoutProducesInput
}

export type ProduceUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
  quantity?: number | IntFieldUpdateOperationsInput
  price?: number | FloatFieldUpdateOperationsInput
  foodtype?: string | StringFieldUpdateOperationsInput
}

export type ReceiptCreateInput = {
  subtotal: number
  total: number
  client: ClientCreateOneWithoutReceiptsInput
  store: StoreCreateOneWithoutReceiptsInput
  produces?: ProduceCreateManyWithoutReceiptInput
}

export type ReceiptUpdateInput = {
  subtotal?: number | FloatFieldUpdateOperationsInput
  total?: number | FloatFieldUpdateOperationsInput
  client?: ClientUpdateOneRequiredWithoutReceiptsInput
  store?: StoreUpdateOneRequiredWithoutReceiptsInput
  produces?: ProduceUpdateManyWithoutReceiptInput
}

export type ReceiptUpdateManyMutationInput = {
  subtotal?: number | FloatFieldUpdateOperationsInput
  total?: number | FloatFieldUpdateOperationsInput
}

export type StoreCreateInput = {
  name: string
  address: string
  email: string
  storeowner: string
  city: string
  province: string
  receipts?: ReceiptCreateManyWithoutStoreInput
  produces?: ProduceCreateManyWithoutStoreInput
}

export type StoreUpdateInput = {
  name?: string | StringFieldUpdateOperationsInput
  address?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  storeowner?: string | StringFieldUpdateOperationsInput
  city?: string | StringFieldUpdateOperationsInput
  province?: string | StringFieldUpdateOperationsInput
  receipts?: ReceiptUpdateManyWithoutStoreInput
  produces?: ProduceUpdateManyWithoutStoreInput
}

export type StoreUpdateManyMutationInput = {
  name?: string | StringFieldUpdateOperationsInput
  address?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  storeowner?: string | StringFieldUpdateOperationsInput
  city?: string | StringFieldUpdateOperationsInput
  province?: string | StringFieldUpdateOperationsInput
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: string | NestedStringFilter
}

export type ReceiptListRelationFilter = {
  every?: ReceiptWhereInput
  some?: ReceiptWhereInput
  none?: ReceiptWhereInput
}

export type FloatFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedFloatFilter
}

export type StoreRelationFilter = {
  is?: StoreWhereInput
  isNot?: StoreWhereInput
}

export type ClientRelationFilter = {
  is?: ClientWhereInput
  isNot?: ClientWhereInput
}

export type ProduceListRelationFilter = {
  every?: ProduceWhereInput
  some?: ProduceWhereInput
  none?: ProduceWhereInput
}

export type ReceiptCreateManyWithoutClientInput = {
  create?: ReceiptCreateWithoutClientInput | Enumerable<ReceiptCreateWithoutClientInput>
  connect?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
}

export type ReceiptUpdateManyWithoutClientInput = {
  create?: ReceiptCreateWithoutClientInput | Enumerable<ReceiptCreateWithoutClientInput>
  connect?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
  set?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
  disconnect?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
  delete?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
  update?: ReceiptUpdateWithWhereUniqueWithoutClientInput | Enumerable<ReceiptUpdateWithWhereUniqueWithoutClientInput>
  updateMany?: ReceiptUpdateManyWithWhereNestedInput | Enumerable<ReceiptUpdateManyWithWhereNestedInput>
  deleteMany?: ReceiptScalarWhereInput | Enumerable<ReceiptScalarWhereInput>
  upsert?: ReceiptUpsertWithWhereUniqueWithoutClientInput | Enumerable<ReceiptUpsertWithWhereUniqueWithoutClientInput>
}

export type StoreCreateOneWithoutProducesInput = {
  create?: StoreCreateWithoutProducesInput
  connect?: StoreWhereUniqueInput
}

export type ReceiptCreateManyWithoutProducesInput = {
  create?: ReceiptCreateWithoutProducesInput | Enumerable<ReceiptCreateWithoutProducesInput>
  connect?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
}

export type StoreUpdateOneRequiredWithoutProducesInput = {
  create?: StoreCreateWithoutProducesInput
  connect?: StoreWhereUniqueInput
  update?: StoreUpdateWithoutProducesDataInput
  upsert?: StoreUpsertWithoutProducesInput
}

export type ReceiptUpdateManyWithoutProducesInput = {
  create?: ReceiptCreateWithoutProducesInput | Enumerable<ReceiptCreateWithoutProducesInput>
  connect?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
  set?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
  disconnect?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
  delete?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
  update?: ReceiptUpdateWithWhereUniqueWithoutProducesInput | Enumerable<ReceiptUpdateWithWhereUniqueWithoutProducesInput>
  updateMany?: ReceiptUpdateManyWithWhereNestedInput | Enumerable<ReceiptUpdateManyWithWhereNestedInput>
  deleteMany?: ReceiptScalarWhereInput | Enumerable<ReceiptScalarWhereInput>
  upsert?: ReceiptUpsertWithWhereUniqueWithoutProducesInput | Enumerable<ReceiptUpsertWithWhereUniqueWithoutProducesInput>
}

export type ClientCreateOneWithoutReceiptsInput = {
  create?: ClientCreateWithoutReceiptsInput
  connect?: ClientWhereUniqueInput
}

export type StoreCreateOneWithoutReceiptsInput = {
  create?: StoreCreateWithoutReceiptsInput
  connect?: StoreWhereUniqueInput
}

export type ProduceCreateManyWithoutReceiptInput = {
  create?: ProduceCreateWithoutReceiptInput | Enumerable<ProduceCreateWithoutReceiptInput>
  connect?: ProduceWhereUniqueInput | Enumerable<ProduceWhereUniqueInput>
}

export type ClientUpdateOneRequiredWithoutReceiptsInput = {
  create?: ClientCreateWithoutReceiptsInput
  connect?: ClientWhereUniqueInput
  update?: ClientUpdateWithoutReceiptsDataInput
  upsert?: ClientUpsertWithoutReceiptsInput
}

export type StoreUpdateOneRequiredWithoutReceiptsInput = {
  create?: StoreCreateWithoutReceiptsInput
  connect?: StoreWhereUniqueInput
  update?: StoreUpdateWithoutReceiptsDataInput
  upsert?: StoreUpsertWithoutReceiptsInput
}

export type ProduceUpdateManyWithoutReceiptInput = {
  create?: ProduceCreateWithoutReceiptInput | Enumerable<ProduceCreateWithoutReceiptInput>
  connect?: ProduceWhereUniqueInput | Enumerable<ProduceWhereUniqueInput>
  set?: ProduceWhereUniqueInput | Enumerable<ProduceWhereUniqueInput>
  disconnect?: ProduceWhereUniqueInput | Enumerable<ProduceWhereUniqueInput>
  delete?: ProduceWhereUniqueInput | Enumerable<ProduceWhereUniqueInput>
  update?: ProduceUpdateWithWhereUniqueWithoutReceiptInput | Enumerable<ProduceUpdateWithWhereUniqueWithoutReceiptInput>
  updateMany?: ProduceUpdateManyWithWhereNestedInput | Enumerable<ProduceUpdateManyWithWhereNestedInput>
  deleteMany?: ProduceScalarWhereInput | Enumerable<ProduceScalarWhereInput>
  upsert?: ProduceUpsertWithWhereUniqueWithoutReceiptInput | Enumerable<ProduceUpsertWithWhereUniqueWithoutReceiptInput>
}

export type ReceiptCreateManyWithoutStoreInput = {
  create?: ReceiptCreateWithoutStoreInput | Enumerable<ReceiptCreateWithoutStoreInput>
  connect?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
}

export type ProduceCreateManyWithoutStoreInput = {
  create?: ProduceCreateWithoutStoreInput | Enumerable<ProduceCreateWithoutStoreInput>
  connect?: ProduceWhereUniqueInput | Enumerable<ProduceWhereUniqueInput>
}

export type ReceiptUpdateManyWithoutStoreInput = {
  create?: ReceiptCreateWithoutStoreInput | Enumerable<ReceiptCreateWithoutStoreInput>
  connect?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
  set?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
  disconnect?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
  delete?: ReceiptWhereUniqueInput | Enumerable<ReceiptWhereUniqueInput>
  update?: ReceiptUpdateWithWhereUniqueWithoutStoreInput | Enumerable<ReceiptUpdateWithWhereUniqueWithoutStoreInput>
  updateMany?: ReceiptUpdateManyWithWhereNestedInput | Enumerable<ReceiptUpdateManyWithWhereNestedInput>
  deleteMany?: ReceiptScalarWhereInput | Enumerable<ReceiptScalarWhereInput>
  upsert?: ReceiptUpsertWithWhereUniqueWithoutStoreInput | Enumerable<ReceiptUpsertWithWhereUniqueWithoutStoreInput>
}

export type ProduceUpdateManyWithoutStoreInput = {
  create?: ProduceCreateWithoutStoreInput | Enumerable<ProduceCreateWithoutStoreInput>
  connect?: ProduceWhereUniqueInput | Enumerable<ProduceWhereUniqueInput>
  set?: ProduceWhereUniqueInput | Enumerable<ProduceWhereUniqueInput>
  disconnect?: ProduceWhereUniqueInput | Enumerable<ProduceWhereUniqueInput>
  delete?: ProduceWhereUniqueInput | Enumerable<ProduceWhereUniqueInput>
  update?: ProduceUpdateWithWhereUniqueWithoutStoreInput | Enumerable<ProduceUpdateWithWhereUniqueWithoutStoreInput>
  updateMany?: ProduceUpdateManyWithWhereNestedInput | Enumerable<ProduceUpdateManyWithWhereNestedInput>
  deleteMany?: ProduceScalarWhereInput | Enumerable<ProduceScalarWhereInput>
  upsert?: ProduceUpsertWithWhereUniqueWithoutStoreInput | Enumerable<ProduceUpsertWithWhereUniqueWithoutStoreInput>
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type NestedFloatFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedFloatFilter
}

export type ReceiptCreateWithoutClientInput = {
  subtotal: number
  total: number
  store: StoreCreateOneWithoutReceiptsInput
  produces?: ProduceCreateManyWithoutReceiptInput
}

export type ReceiptUpdateWithWhereUniqueWithoutClientInput = {
  where: ReceiptWhereUniqueInput
  data: ReceiptUpdateWithoutClientDataInput
}

export type ReceiptUpdateManyWithWhereNestedInput = {
  where: ReceiptScalarWhereInput
  data: ReceiptUpdateManyDataInput
}

export type ReceiptScalarWhereInput = {
  AND?: ReceiptScalarWhereInput | Enumerable<ReceiptScalarWhereInput>
  OR?: ReceiptScalarWhereInput | Enumerable<ReceiptScalarWhereInput>
  NOT?: ReceiptScalarWhereInput | Enumerable<ReceiptScalarWhereInput>
  id?: IntFilter | number
  subtotal?: FloatFilter | number
  total?: FloatFilter | number
  clientid?: IntFilter | number
  storeid?: IntFilter | number
}

export type ReceiptUpsertWithWhereUniqueWithoutClientInput = {
  where: ReceiptWhereUniqueInput
  update: ReceiptUpdateWithoutClientDataInput
  create: ReceiptCreateWithoutClientInput
}

export type StoreCreateWithoutProducesInput = {
  name: string
  address: string
  email: string
  storeowner: string
  city: string
  province: string
  receipts?: ReceiptCreateManyWithoutStoreInput
}

export type ReceiptCreateWithoutProducesInput = {
  subtotal: number
  total: number
  client: ClientCreateOneWithoutReceiptsInput
  store: StoreCreateOneWithoutReceiptsInput
}

export type StoreUpdateWithoutProducesDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  address?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  storeowner?: string | StringFieldUpdateOperationsInput
  city?: string | StringFieldUpdateOperationsInput
  province?: string | StringFieldUpdateOperationsInput
  receipts?: ReceiptUpdateManyWithoutStoreInput
}

export type StoreUpsertWithoutProducesInput = {
  update: StoreUpdateWithoutProducesDataInput
  create: StoreCreateWithoutProducesInput
}

export type ReceiptUpdateWithWhereUniqueWithoutProducesInput = {
  where: ReceiptWhereUniqueInput
  data: ReceiptUpdateWithoutProducesDataInput
}

export type ReceiptUpsertWithWhereUniqueWithoutProducesInput = {
  where: ReceiptWhereUniqueInput
  update: ReceiptUpdateWithoutProducesDataInput
  create: ReceiptCreateWithoutProducesInput
}

export type ClientCreateWithoutReceiptsInput = {
  first_name: string
  last_name: string
  age: number
  email: string
  phone: string
}

export type StoreCreateWithoutReceiptsInput = {
  name: string
  address: string
  email: string
  storeowner: string
  city: string
  province: string
  produces?: ProduceCreateManyWithoutStoreInput
}

export type ProduceCreateWithoutReceiptInput = {
  name: string
  quantity: number
  price: number
  foodtype: string
  store: StoreCreateOneWithoutProducesInput
}

export type ClientUpdateWithoutReceiptsDataInput = {
  first_name?: string | StringFieldUpdateOperationsInput
  last_name?: string | StringFieldUpdateOperationsInput
  age?: number | IntFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  phone?: string | StringFieldUpdateOperationsInput
}

export type ClientUpsertWithoutReceiptsInput = {
  update: ClientUpdateWithoutReceiptsDataInput
  create: ClientCreateWithoutReceiptsInput
}

export type StoreUpdateWithoutReceiptsDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  address?: string | StringFieldUpdateOperationsInput
  email?: string | StringFieldUpdateOperationsInput
  storeowner?: string | StringFieldUpdateOperationsInput
  city?: string | StringFieldUpdateOperationsInput
  province?: string | StringFieldUpdateOperationsInput
  produces?: ProduceUpdateManyWithoutStoreInput
}

export type StoreUpsertWithoutReceiptsInput = {
  update: StoreUpdateWithoutReceiptsDataInput
  create: StoreCreateWithoutReceiptsInput
}

export type ProduceUpdateWithWhereUniqueWithoutReceiptInput = {
  where: ProduceWhereUniqueInput
  data: ProduceUpdateWithoutReceiptDataInput
}

export type ProduceUpdateManyWithWhereNestedInput = {
  where: ProduceScalarWhereInput
  data: ProduceUpdateManyDataInput
}

export type ProduceScalarWhereInput = {
  AND?: ProduceScalarWhereInput | Enumerable<ProduceScalarWhereInput>
  OR?: ProduceScalarWhereInput | Enumerable<ProduceScalarWhereInput>
  NOT?: ProduceScalarWhereInput | Enumerable<ProduceScalarWhereInput>
  id?: IntFilter | number
  name?: StringFilter | string
  quantity?: IntFilter | number
  price?: FloatFilter | number
  foodtype?: StringFilter | string
  storeid?: IntFilter | number
}

export type ProduceUpsertWithWhereUniqueWithoutReceiptInput = {
  where: ProduceWhereUniqueInput
  update: ProduceUpdateWithoutReceiptDataInput
  create: ProduceCreateWithoutReceiptInput
}

export type ReceiptCreateWithoutStoreInput = {
  subtotal: number
  total: number
  client: ClientCreateOneWithoutReceiptsInput
  produces?: ProduceCreateManyWithoutReceiptInput
}

export type ProduceCreateWithoutStoreInput = {
  name: string
  quantity: number
  price: number
  foodtype: string
  receipt?: ReceiptCreateManyWithoutProducesInput
}

export type ReceiptUpdateWithWhereUniqueWithoutStoreInput = {
  where: ReceiptWhereUniqueInput
  data: ReceiptUpdateWithoutStoreDataInput
}

export type ReceiptUpsertWithWhereUniqueWithoutStoreInput = {
  where: ReceiptWhereUniqueInput
  update: ReceiptUpdateWithoutStoreDataInput
  create: ReceiptCreateWithoutStoreInput
}

export type ProduceUpdateWithWhereUniqueWithoutStoreInput = {
  where: ProduceWhereUniqueInput
  data: ProduceUpdateWithoutStoreDataInput
}

export type ProduceUpsertWithWhereUniqueWithoutStoreInput = {
  where: ProduceWhereUniqueInput
  update: ProduceUpdateWithoutStoreDataInput
  create: ProduceCreateWithoutStoreInput
}

export type ReceiptUpdateWithoutClientDataInput = {
  subtotal?: number | FloatFieldUpdateOperationsInput
  total?: number | FloatFieldUpdateOperationsInput
  store?: StoreUpdateOneRequiredWithoutReceiptsInput
  produces?: ProduceUpdateManyWithoutReceiptInput
}

export type ReceiptUpdateManyDataInput = {
  subtotal?: number | FloatFieldUpdateOperationsInput
  total?: number | FloatFieldUpdateOperationsInput
}

export type ReceiptUpdateWithoutProducesDataInput = {
  subtotal?: number | FloatFieldUpdateOperationsInput
  total?: number | FloatFieldUpdateOperationsInput
  client?: ClientUpdateOneRequiredWithoutReceiptsInput
  store?: StoreUpdateOneRequiredWithoutReceiptsInput
}

export type ProduceUpdateWithoutReceiptDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  quantity?: number | IntFieldUpdateOperationsInput
  price?: number | FloatFieldUpdateOperationsInput
  foodtype?: string | StringFieldUpdateOperationsInput
  store?: StoreUpdateOneRequiredWithoutProducesInput
}

export type ProduceUpdateManyDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  quantity?: number | IntFieldUpdateOperationsInput
  price?: number | FloatFieldUpdateOperationsInput
  foodtype?: string | StringFieldUpdateOperationsInput
}

export type ReceiptUpdateWithoutStoreDataInput = {
  subtotal?: number | FloatFieldUpdateOperationsInput
  total?: number | FloatFieldUpdateOperationsInput
  client?: ClientUpdateOneRequiredWithoutReceiptsInput
  produces?: ProduceUpdateManyWithoutReceiptInput
}

export type ProduceUpdateWithoutStoreDataInput = {
  name?: string | StringFieldUpdateOperationsInput
  quantity?: number | IntFieldUpdateOperationsInput
  price?: number | FloatFieldUpdateOperationsInput
  foodtype?: string | StringFieldUpdateOperationsInput
  receipt?: ReceiptUpdateManyWithoutProducesInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
