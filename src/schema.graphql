type Query {
  getClients: [Client!]!
  getClient(id: ID!): Client!
  getProduces: [Produce!]!
  getProduce(id: ID!): Produce!
  getStores: [Store!]!
  getStore(id: ID!): Store!
  getReceipt(id: ID!): Receipt!
  getReceipts: [Receipt!]!
}

type Mutation {
  addClient(
    first_name: String!,
    last_name: String!,
    age: Int,
    email: String,
    phone: String
  ): Client!

  deleteClient(
    id: ID!
  ): Client!

  updateClient(
    id: ID!
    first_name: String,
    last_name: String,
    age: Int,
    email: String,
    phone: String
  ): Client!

  addProduce(
    name: String
    quantity: Int
    price: Float
    foodtype: String
  ): Produce

  deleteProduce(
    id: ID!
  ): Produce!

  updateProduce(
    id: ID!
    quantity: Int!
    price: Float!
  ): Produce!

  addStore(
    name: String!
    address: String!
    email: String!
    storeowner: String!
    city: String!
    province: String!
  ): Store!

  deleteStore(
    id: ID!
  ): Store!

  updateStore(
  id: ID!
  name: String!
  address: String!
  email: String!
  storeowner: String!
  city: String!
  province: String!
  ): Store!

  addReceipt(
    subtotal: Float!
    total: Float!
    clientid: Int """Only temporary"""
    storeid: Int """Only temporary"""
  ): Receipt!

  updateReceipt(
    subtotal: Float!
    total: Float!
  ): Receipt!

  deleteReceipt(
    id: ID!
  ): Receipt!
}

type Client {
  id: ID!
  first_name: String!
  last_name: String!
  age: Int
  email: String
  phone: String
  receipts: [Receipt!]!
}
"""
Should be Store! and check update/add
"""
type Produce {
  id: ID!
  name: String!
  quantity: Int!
  price: Float!
  foodtype: String!
  store: Store
  receipts: [Receipt!]!
}

type Receipt {
  id: ID!
  subtotal: Float
  total: Float
  client: Client!
  store: Store!
  produces: [Produce!]!
}

"""
Should be Store! and check update/add
"""
type Store {
  id: ID!
  name: String!
  address: String!
  email: String!
  storeowner: String!
  city: String!
  province: String!
  receipts: [Receipt!]!
}
