type Query {
  getClients: [Client!]!
  getClient(id: ID!): Client!
  getProduces: [Produce!]!
  getProduce(id: ID!): Produce!
  getStores: [Store!]!
  getStore(id: ID!): Store!
  getReceipt(id: ID!): Receipt!
  getReceipts: [Receipt!]!
}

type Mutation {
  signup(
    first_name: String!
    last_name: String!
    age: Int
    email: String!
    phone: String
    password: String!
  ): AuthPayload

  login(email: String!
    password: String!
  ): AuthPayload

  deleteClient(
    id: ID!
  ): Client!

  updateClient(
    first_name: String
    last_name: String
    age: Int
    email: String
    phone: String
  ): Client!

  addProduce(
    name: String
    quantity: Int
    price: Float
    foodtype: foodtype
    storeid: Int
  ): Produce

  deleteProduce(
    id: ID!
  ): Produce!

  updateProduce(
    id: ID!
    quantity: Int
    price: Float
  ): Produce!

  addStore(
    name: String!
    address: String!
    email: String!
    storeowner: String!
    city: String!
    province: String!
    phone: String!
  ): Store!

  deleteStore(
    id: ID!
  ): Store!

  updateStore(
    id: ID!
    name: String
    address: String
    email: String
    storeowner: String
    city: String
    province: String
  ): Store!

  addReceipt(
    subtotal: Float!
    total: Float!
    clientid: Int!
    storeid: Int!
    produces: [Int!]!
  ): Receipt!

  updateReceipt(
    id: ID!
    subtotal: Float!
    total: Float
  ): Receipt!

  deleteReceipt(
    id: ID!
  ): Receipt!
}

type Client {
  id: ID!
  first_name: String!
  last_name: String!
  age: Int
  email: String
  phone: String
  receipts: [Receipt!]!
  password: String!
}

type Produce {
  id: ID!
  name: String!
  quantity: Int!
  price: Float!
  foodtype: foodtype!
  store: Store!
  receiptsContainingProduce: [Receipt!]!
}

enum foodtype {
  FRUIT
  VEGETABLE
}

type Receipt {
  id: ID!
  subtotal: Float!
  total: Float!
  client: Client!
  store: Store!
  produces: [Produce!]!
}

type Store {
  id: ID!
  name: String!
  address: String!
  email: String!
  phone: String!
  storeowner: String!
  city: String!
  province: String!
  receipts: [Receipt!]!
}

type AuthPayload {
  token: String
  client: Client
}
